use bio::io::fasta::{self, *};
use std::fs::File;
use std::io;
use std::path::Path;

const FASTA_DIR: &str = "./src/tests/fasta";
const FASTA_FILES: [&str; 2] = ["./src/tests/fasta/ERR209055.fa", "./src/tests/fasta/ERR209056.fa"];

pub fn ref_fasta_records() -> Records<File> {
    fasta::Reader::from_file(FASTA_FILES[0]).unwrap().records()
}
pub fn qry_fasta_records() -> Records<File> {
    fasta::Reader::from_file(FASTA_FILES[1]).unwrap().records()
}

pub fn get_fasta_records() -> (Records<File>, Records<File>) {
    let mut ref_records = fasta::Reader::from_file(FASTA_FILES[0]).unwrap().records();
    let mut qry_records = fasta::Reader::from_file(FASTA_FILES[1]).unwrap().records();
    (ref_records, qry_records)
}

fn print_fasta_list() {
    let fasta_path = Path::new(FASTA_DIR);
    for entry in fasta_path.read_dir().expect("read_dir call failed") {
        if let Ok(entry) = entry {
            println!("{:?}", entry.path());
        }
    }
}

pub fn get_test_data() -> Vec<(String, String)> {
    let data = vec![
        (
            // >ERR209056;k59_14625
            "ATAAACATAAATACATATGCGGGAGAGCTTCCGCTGACTCCCACGACCACATCCATCAGACGCTCCGGTACGACACTTGCGATGCCGAAGGAACGGAGCAGGGAAAGCACCTGCTCTGTCTCATCCTCCGTGACATTTTCTCCGATGCATACACCGGTACAGCCCTCCAGTACCAGGGCCGGCGTATTGGGCATGCAGCGGATCAGCTTAAGCTCCGGTCTGTCAAATGCATCCTTC".to_string(),
            // >ERR209055;k59_2911
            "TTCACCGGGATGTTTTCCGGTCTCCAGCACCATTTTGGCACTGCCGAGTACGGACTGTGCTGCGAATTCATAGGCCTGTTTTCTGGGCATTCCGGCTGCCACAGCTTCATCCGCCATGGCCTCAATAAACATAAATACATATGCGGGAGAGCTTCCGCTGACTCCCACGACCACATCCATCAGACGCTCCGGTACGACACTTGCGATGCCGAAGGAACGGAGCAGGGAAAGCACCTGCTCTGTCTCATCCTCCGTGACATTTTC".to_string()
        ),
        (
            "ATAAACATAAATACATATGCGGGAGAGCTTCCGCTGACTCCCACGACCACATCCATCAGACGCTCCGGTACGACACTTGCGATGCCGAAGGAACGGAGCAGGGAAAGCACCTGCTCTGTCTCATCCTCCGTGACATTTTCTCCGATGCATACACCGGTACAGCCCTCCAGTACCAGGGCCGGCGTATTGGGCATGCAGCGGATCAGCTTAAGCTCCGGTCTGTCAAATGCATCCTTC".to_string(),
            "CCGCTGACTCCCACGACCACATCCATCAGACGCTCCGGTACGACACTTGCGATGCCGAAGGACGGAGCAGGGAAAGCACCTGCTCTGTCTCATCCTCCGTGACATTTTCTCCGATGCATACACCGGTACAGCCCTCCAGTACCAGGGCCGGCGTATTGGGCATGCAGCGGATCAGCTTAAGCTCCGGTCTGTCAAATTCATCCTTCGACAAACCTGTGGCCAAAACTCTTGAAGTCAGTAAATATCCTGCCATTTCTTGCTGCTTCTCATATCGCGACTGAATATCAATGCCAGATGACAGGGCAGTAATTGATTGAAGT".to_string(),
        )
    ];
    data
}